version: 2.1

commands:
  setup-tooling:
    description: "Install tools and configure kubectl for sonarqube access"
    steps:
      - kubernetes/install
      - helm/install-helm-client:
          version: v2.13.1
      - run:
          name: Set up a kubectl context for tooling
          command: |
            echo -n "${KUBE_ENV_TOOLING_CACERT}" | base64 -d > /tmp/cluster_tooling_ca.crt
            kubectl config set-cluster "${KUBE_ENV_TOOLING_NAME}" \
              --certificate-authority="/tmp/cluster_tooling_ca.crt" \
              --server="https://api.${KUBE_ENV_TOOLING_NAME}"
            kubectl config set-credentials circleci_tooling \
              --token="${KUBE_ENV_TOOLING_TOKEN}"
            kubectl config set-context circleci_tooling \
              --cluster="${KUBE_ENV_TOOLING_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_TOOLING_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci_tooling
            kubectl -n "${KUBE_ENV_TOOLING_NAMESPACE}" get secret hmpps-pcs-tooling-sonarqube-user-token

executors:
  setup-tooling:
    docker:
      - image: circleci/python:3
  deployer:
    docker:
      - image: circleci/python:3
    working_directory: ~/app
  builder:
    docker:
      - image: gradle:jdk11
    working_directory: ~/app
  sonar-scanner:
    docker:
      - image: sonarsource/sonar-scanner-cli:4.2
        environment:
          SONAR_HOST_URL: https://pcs-sonarqube.apps.live-1.cloud-platform.service.justice.gov.uk/
          SONAR_PROJECT_KEY: digital-probation-java-skeleton:foo
    working_directory: ~/app

orbs:
  kubernetes: circleci/kubernetes@0.3.0
  helm: circleci/helm@0.1.2
  owasp: entur/owasp@0.0.10
  snyk: snyk/snyk@0.0.9

jobs:
  setup-tooling:
    executor: setup-tooling
    steps:
      - setup-tooling

  build_and_test:
    executor: builder
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle" }}
            - gradle-
      - run: gradle clean build
      - snyk/scan
      - run:
          name: Record the Application Version
          command: |
            APP_VERSION="0.1.0"

            # make up a good version name
            TAG=${APP_VERSION}.${CIRCLE_BRANCH}
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              TAG=${APP_VERSION}
            fi
            echo $TAG > ./app_version.txt
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}
      - store_test_results:
          path: service/build/reports
      - store_artifacts:
          path: service/build/reports
      - run: gradle jacocoTestReport jacocoTestCoverageVerification
      - persist_to_workspace:
          root: .
          paths:
            - service/build/libs
            - service/build/reports/jacoco
            - build.gradle
            - app_version.txt

  build_docker:
    executor: deployer
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker
      - run:
          name: Build container
          command: |
            APP_VERSION="0.1.0"
            docker build --rm=false . \
              -f service/docker/Dockerfile \
              --tag "mojdigitalstudio/digital-probation-java-skeleton:$APP_VERSION" \
              --label "maintainer=pcs-team@digital.justice.gov.uk" \
              --label "app.version=$APP_VERSION" \
              --label "build.version=$APP_VERSION" \
              --label "build.number=$CIRCLE_BUILD_NUM" \
              --label "build.url=$CIRCLE_BUILD_URL" \
              --label "build.gitref=$CIRCLE_SHA1"
            docker tag mojdigitalstudio/digital-probation-java-skeleton:$APP_VERSION mojdigitalstudio/digital-probation-java-skeleton:latest
      - run:
          name: Install trivy
          command: |
            VERSION=$(
                curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | \
                grep '"tag_name":' | \
                sed -E 's/.*"v([^"]+)".*/\1/'
            )
            wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
            tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz
            sudo mv trivy /usr/local/bin
      - run:
          name: Scan the local image with trivy
          command: |
            APP_VERSION="0.1.0"
            mkdir -p service/build/reports/trivy
            trivy --exit-code 0 --no-progress -f json -o service/build/reports/trivy/report.json "mojdigitalstudio/digital-probation-java-skeleton:$APP_VERSION" > service/build/reports/trivy/report.json
      - persist_to_workspace:
          root: .
          paths:
            - service/build/reports/trivy

  sonar-scan:
    executor: sonar-scanner
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Run sonar scan
          command: |
            set -euo pipefail
            declare -a args
            add_env_var_as_env_prop() {
              if [ "$1" ]; then
                args+=("-D$2=$1")
              fi
            }
            add_env_var_as_env_prop "${SONAR_LOGIN:-}" "sonar.login"
            add_env_var_as_env_prop "${SONAR_PASSWORD:-}" "sonar.password"
            add_env_var_as_env_prop "${SONAR_USER_HOME:-}" "sonar.userHome"
            add_env_var_as_env_prop "${SONAR_PROJECT_BASE_DIR:-}" "sonar.projectBaseDir"
            add_env_var_as_env_prop "${SONAR_PROJECT_KEY:-}" "sonar.projectKey"
            PROJECT_BASE_DIR="$PWD"
            if [ "${SONAR_PROJECT_BASE_DIR:-}" ]; then
              PROJECT_BASE_DIR="${SONAR_PROJECT_BASE_DIR}"
            fi
            export SONAR_USER_HOME="$PROJECT_BASE_DIR/.sonar"
            sonar-scanner "${args[@]}"

workflows:
  version: 2
  code-quality:
    jobs:
      - build_and_test
      - owasp/gradle_owasp_dependency_check:
          persist_to_workspace: true
      - build_docker:
          requires:
            - build_and_test
      - sonar-scan:
          requires:
            - build_and_test
            - build_docker
            - owasp/gradle_owasp_dependency_check
